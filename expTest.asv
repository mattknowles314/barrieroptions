%Stock Data
Smin = 0;
Smax = 4*K;
    
%Price Grid
    
S = linspace(Smin,Smax,N+1);
dS = S(2)-S(1);

%Time Grid
tau = linspace(0,T,M+1);
dtau = tau(2)-tau(1);
    
%Empty array for options prices
Vold = zeros(N+1,1); 
%Initial condition, V(S,0) = max(S-K,0) if S<B, 
for p = 1:N+1
    if S(p) < B
        Vold(p) = max(S(p)-K,0);
    else
        Vold(p) = 0;
    end
end
Vnew = Vold;

%Matrix for storing volatility at different points on the grid
sigs = zeros(N+1,M);
for j = 2:M
    for k = 2:N+1
        sigs(j,k) = 0.25*exp(-tau(j))*(100/S(k))^0.35;

    end
end

%Matrices for storing values of Alpha and Beta at a given point
Alpha = zeros(M,N+1);
Beta = zeros(M,N+1);

%Calculate all values for alpha and beta
for j=1:N+1
    for k=1:M
        Alpha(j,k) = 0.5*(sigs(j,k)^2)*(S(j))^2*(dtau/(dS^2));
        Beta(j,k) = (r-q)*S(j)*(dtau/(2*dS));
    end
end

%Matrices for storing upper and lower diagonals
L = zeros(M,N+1);
D = zeros(M,N+1);
U = zeros(M,N+1);

%Calculate lower, main and upper diagonal values
for j=1:M
    for k=1:N+1
        L(j,k) = Alpha(j,k)-Beta(j,k);
        D(j,k) = 1-(r*dtau)-(2*Alpha(j,k));
        U(j,k) = Alpha(j,k)+Beta(j,k);
    end
end

%Boundary conditions
boundary = [L(1)*(2*Vold(1)-Vold(2));zeros(N-2,1);U(N-1)*(2*Vold(N-1)-Vold(N-2))];

%Solve Black-Scholes PDE
for j=1:M
    for k=1:N+1
        if(j==1)
            Vnew(j) = D(j,k)*Vold(j) + U(j)*Vold(j+1);
        elseif(j<N-1)
            Vnew(j) = L(j)*Vold(j-1) + D(j)*Vold(j) + U(j)*Vold(j+1);
        else
            Vnew(j) = L(j)*Vold(j-1) + D(j)*Vold(j);
        end
    end
end

function h = payoff(Svals,K,B,M)
    if max(Svals) < B
        h = max(Svals(M)-K,0);
    else
        h = 0;
    end
end